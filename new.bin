
<!DOCTYPE html>
<html lang="en" class="h-100">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<script defer data-domain="arduinojson.org" src="https://plausible.benoitblanchon.fr/js/script.outbound-links.file-downloads.js"></script>
<script>window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }</script>
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel="stylesheet" href="/assets/style.css?1710864966">
<link rel="icon" href="/favicon.ico" />
<link type="application/atom+xml" rel="alternate" href="https://arduinojson.org/feed.xml" title="ArduinoJson" />
<title>Deserialization tutorial
 | ArduinoJson 7</title>

<meta name="generator" content="Jekyll v4.3.3" />
<meta property="og:title" content="Deserialization tutorial" />
<meta name="author" content="BenoitBlanchon" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="This page teaches how to deserialize a JSON document using the library ArduinoJson." />
<meta property="og:description" content="This page teaches how to deserialize a JSON document using the library ArduinoJson." />
<link rel="canonical" href="https://arduinojson.org/v7/tutorial/deserialization/" />
<meta property="og:url" content="https://arduinojson.org/v7/tutorial/deserialization/" />
<meta property="og:site_name" content="ArduinoJson" />
<meta property="og:image" content="https://arduinojson.org/images/logo-1200.jpg" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://arduinojson.org/images/logo-1200.jpg" />
<meta property="twitter:title" content="Deserialization tutorial" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","author":{"@type":"Person","name":"BenoitBlanchon"},"description":"This page teaches how to deserialize a JSON document using the library ArduinoJson.","headline":"Deserialization tutorial","image":"https://arduinojson.org/images/logo-1200.jpg","publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://arduinojson.org/images/logo-256.png"},"name":"BenoitBlanchon"},"url":"https://arduinojson.org/v7/tutorial/deserialization/"}</script>

<meta name="keywords" content="ArduinoJson,parse,decode">
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [{
      "@type": "ListItem",
      "position": 1,
      "name": "Version 7",
      "item": "https://arduinojson.org/v7/"
    },{
      "@type": "ListItem",
      "position": 2,
      "name": "Deserialization tutorial",
      "item": "https://arduinojson.org/v7/tutorial/deserialization/"
    }
  ]
}
</script>
</head>
<body data-variant="0" data-timestamp="1710864966" data-environment="production" data-no-js>
<script>delete document.body.dataset.noJs</script>
<div class="d-flex flex-column" style="min-height: 100vh">
<header>
<div class="alert alert-success text-center m-0 rounded-0 border-0" role="alert" data-closeid="arduinojson7-just-released">
ArduinoJson 7 has just been released. <a href="/news/2024/01/03/arduinojson-7/">See what's new</a>.
<button type="button" class="close" aria-label="Close" data-dismiss="alert">
<span aria-hidden="true">&times;</span>
</button>
</div>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
<div class="container">
<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarArduinoJson" aria-controls="navbarArduinoJson" aria-expanded="false" aria-label="Toggle navigation">
<span class="navbar-toggler-icon"></span>
</button>
<a class="navbar-brand" href="/">
<img alt="ArduinoJson" src="/images/navlogo.svg" width="1256" height="203" style="height: 1.5em; width: auto">
</a>
<div class="collapse navbar-collapse" id="navbarArduinoJson">
<ul class="navbar-nav mr-auto">
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
v7
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdown">
<a class="dropdown-item" href="/v5/doc/decoding/">v5</a>
<a class="dropdown-item" href="/v6/doc/deserialization/">v6</a>
<span class="dropdown-item disabled">v7</span>
</div>
</li>
<li id="nav-doc" class="nav-item active"><a class="nav-link" href="/v7/">Documentation</a>
</li><li id="nav-assistant" class="nav-item"><a class="nav-link" href="/v7/assistant/">Assistant</a>
</li><li id="nav-troubleshooter" class="nav-item"><a class="nav-link" href="/troubleshooter">Troubleshooter</a>
</li><li id="nav-book" class="nav-item"><a class="nav-link" href="/book/">Book</a>
</li><li id="nav-news" class="nav-item"><a class="nav-link" href="/news/">News</a>
</li></ul>
<form class="mr-sm-2" action="/v7/search/">
<input class="form-control" name="q" type="search" placeholder="Search" aria-label="Search">
</form>
</div>
</div>
</nav>
</header>
<main class="flex-grow-1">
<header class="page-header">
<div class="container">
<nav aria-label="breadcrumb">
<a href="/v7/" class="text-light">Version 7</a>
</nav>
<h1><p>Deserialization tutorial</p>
</h1>
</div>
</header>
<div class="container">
<div class="clearfix article">
<div style="max-width: 560px" class="mx-auto mb-2">
<div class="embed-responsive embed-responsive-16by9">
<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/ZfaSZrATTU8?rel=0&amp;showinfo=0" allowfullscreen></iframe>
</div>
</div>
<p>In this quick tutorial, we’ll see how to deserialize a JSON document with ArduinoJson 7.
As a reminder, deserialization turns a JSON input into objects from which we can extract the values.
This tutorial requires a basic understanding of Arduino programming and a vague knowledge of JSON.</p>
<p class="short-tip">It doesn’t matter if you’re using an Arduino UNO, an ESP8266, or an ESP32; the code shown here works on any device.</p>
<h2 id="the-json-input">The JSON input</h2>
<p>We’ll write a program that extracts and prints all the values from the following JSON document:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"sensor"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gps"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"time"</span><span class="p">:</span><span class="w"> </span><span class="mi">1351824120</span><span class="p">,</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="mf">48.756080</span><span class="p">,</span><span class="w">
    </span><span class="mf">2.302038</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>This JSON document contains three root members: a string named <code class="language-plaintext highlighter-rouge">sensor</code>, a number named <code class="language-plaintext highlighter-rouge">time</code>, and an array named <code class="language-plaintext highlighter-rouge">data</code>.</p>
<p>We’ll store the input in the following variable:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">sensor</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">gps</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">time</span><span class="se">\"</span><span class="s">:1351824120,</span><span class="se">\"</span><span class="s">data</span><span class="se">\"</span><span class="s">:[48.756080,2.302038]}"</span><span class="p">;</span>
</code></pre></div></div>
<p>In this case, the JSON input is hard-coded, but in an actual project, it could come from an HTTP response or a configuration file.</p>
<h2 id="deserializing-the-document">Deserializing the document</h2>
<p>I’m assuming you already installed ArduinoJson 7 on your computer. If not, please refer to the <a href="/v7/how-to/install-arduinojson/">installation guide</a>.</p>
<p>First, we must include the library in the program.
Add the following line at the top of your program:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;ArduinoJson.h&gt;</span><span class="cp">
</span></code></pre></div></div>
<p>Then, we must declare a variable to store the deserialized document.
We do that with <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a>:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JsonDocument</span> <span class="n">doc</span><span class="p">;</span>
</code></pre></div></div>
<p>Then, we must call <a href="/v7/api/json/deserializejson/"><code class="language-plaintext highlighter-rouge">deserializeJson()</code></a>, passing the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a> as the first argument and the JSON input as the second.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deserializeJson</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</code></pre></div></div>
<h2 id="extracting-the-values">Extracting the values</h2>
<p>We can now extract the values from the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a>:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sensor</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"sensor"</span><span class="p">];</span>
</code></pre></div></div>
<p>As you can see, we use square brackets to extract a member from a JSON object.</p>
<p>ArduinoJson implicitly converts the value to the expected type.<br/>
We can do the same with the timestamp:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"time"</span><span class="p">];</span>
</code></pre></div></div>
<p class="short-tip">If you don’t like implicit conversions, you can explicitly set the type with <a href="/v7/api/jsonvariant/as/"><code class="language-plaintext highlighter-rouge">as&lt;T&gt;()</code></a>.</p>
<p>Finally, you can chain brackets to extract nested values.
For example, we can extract the coordinates like so:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"data"</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
<span class="kt">double</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"data"</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</code></pre></div></div>
<p>Here, we are extracting only two values from the <code class="language-plaintext highlighter-rouge">data</code> array, but if we were to extract many values, it would be more efficient to save a reference to the array.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">JsonArray</span> <span class="n">data</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"data"</span><span class="p">];</span>
<span class="kt">double</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kt">double</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</code></pre></div></div>
<p>As you can see, we use <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a> to hold a reference to the array in the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a>. This is more efficient than the previous version because the program only searches the <code class="language-plaintext highlighter-rouge">"data"</code> key once.
Also, <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a> allows you to perform loops, like so:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">JsonVariant</span> <span class="n">item</span> <span class="o">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
   
<span class="p">}</span>
</code></pre></div></div>
<p>As you can see, the item in the for loop is a <a href="/v7/api/jsonvariant/"><code class="language-plaintext highlighter-rouge">JsonVariant</code></a>.
Like <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a>, it is a reference to a value in the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a>, except <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a> is limited to arrays, whereas <a href="/v7/api/jsonvariant/"><code class="language-plaintext highlighter-rouge">JsonVariant</code></a> can refer to any value.</p>
<p class="short-warning">It is crucial to understand that neither <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a> nor <a href="/v7/api/jsonvariant/"><code class="language-plaintext highlighter-rouge">JsonVariant</code></a> holds any data. Instead, they rely on the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a> to have it. Therefore, you must never use a <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a> or a <a href="/v7/api/jsonvariant/"><code class="language-plaintext highlighter-rouge">JsonVariant</code></a> after the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a> has been destructed</p>
<p>Note that there is a third reference type, <a href="/v7/api/jsonobject/"><code class="language-plaintext highlighter-rouge">JsonObject</code></a>, similar to <a href="/v7/api/jsonarray/"><code class="language-plaintext highlighter-rouge">JsonArray</code></a>, but for objects. I invite you to check the documentation to learn more.</p>
<p>Now that we have extracted the values, we can print them to the serial port.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">sensor</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">longitude</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</code></pre></div></div>
<h2 id="error-handling">Error handling</h2>
<p>If you run this program, you’ll see that is prints the values as expected, but we forgot an essential part: the error handling.</p>
<p>Two kinds of problem can occur in this program: deserialization errors and extraction errors.</p>
<h3 id="deserialization-errors">Deserialization errors</h3>
<p>The first kind of problem is an issue with the deserialization process. For example, the JSON input could be invalid, or we could run out of memory.
We can easily detect these problems by checking the return value of <a href="/v7/api/json/deserializejson/"><code class="language-plaintext highlighter-rouge">deserializeJson()</code></a>.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DeserializationError</span> <span class="n">error</span> <span class="o">=</span> <span class="n">deserializeJson</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</code></pre></div></div>
<p>As you can see, <a href="/v7/api/json/deserializejson/"><code class="language-plaintext highlighter-rouge">deserializeJson()</code></a> returns an error status of type <a href="/v7/api/misc/deserializationerror/"><code class="language-plaintext highlighter-rouge">DeserializationError</code></a>.</p>
<p>We can test if the call failed with <code class="language-plaintext highlighter-rouge">if(error)</code>:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"deserializeJson() returned "</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As you can see, we can call <code class="language-plaintext highlighter-rouge">c_str()</code> to get a string representation of the error.</p>
<h3 id="extraction-errors">Extraction errors</h3>
<p>The second kind of problem is when deserialization succeeds, but the document differs from what the program expects.
For example, some fields could be missing or have a different type.</p>
<p>In both cases, ArduinoJson returns a default value that depends on the extracted type.
For example, if the member <code class="language-plaintext highlighter-rouge">sensor</code> is missing, or if it’s not a string, ArduinoJson will return a null pointer:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sensor</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"sensor"</span><span class="p">];</span> <span class="c1">// default = nullptr</span>
</code></pre></div></div>
<p>In other words, the variable <code class="language-plaintext highlighter-rouge">sensor</code> would be null, so you may need to prepare for this possibility.
Similarly, if the member <code class="language-plaintext highlighter-rouge">time</code> is missing, ArduinoJson will return 0:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"time"</span><span class="p">];</span> <span class="c1">// default = 0</span>
</code></pre></div></div>
<p>You can change the default value using <a href="/v7/api/jsonvariant/or/">the pipe operator</a>.
For example, you could define a default for <code class="language-plaintext highlighter-rouge">sensor</code> like so:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sensor</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"sensor"</span><span class="p">]</span> <span class="o">|</span> <span class="s">"unknown"</span><span class="p">;</span>
</code></pre></div></div>
<p>Now, if <code class="language-plaintext highlighter-rouge">sensor</code> is missing, or if it’s not a string, the variable will be assigned to <code class="language-plaintext highlighter-rouge">"unknown"</code>.</p>
<p class="short-warning">Note that this particular use of <a href="/v7/api/jsonvariant/or/">the pipe operator</a> is specific to ArduinoJson and only works with <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a> and <a href="/v7/api/jsonvariant/"><code class="language-plaintext highlighter-rouge">JsonVariant</code></a>.</p>
<h2 id="the-full-program">The full program</h2>
<p>Here is the full program:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;ArduinoJson.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Initialize the serial port</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

  <span class="c1">// {</span>
  <span class="c1">//   "sensor": "gps",</span>
  <span class="c1">//   "time": 1351824120,</span>
  <span class="c1">//   "data": [</span>
  <span class="c1">//     48.756080,</span>
  <span class="c1">//     2.302038</span>
  <span class="c1">//   ]</span>
  <span class="c1">// }</span>
  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">json</span> <span class="o">=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">sensor</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">gps</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">time</span><span class="se">\"</span><span class="s">:1351824120,</span><span class="se">\"</span><span class="s">data</span><span class="se">\"</span><span class="s">:[48.756080,2.302038]}"</span><span class="p">;</span>

  <span class="n">DeserializationError</span> <span class="n">error</span> <span class="o">=</span> <span class="n">deserializeJson</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">json</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">"deserializeJson() failed: "</span><span class="p">));</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// Extract the values</span>
  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">sensor</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"sensor"</span><span class="p">];</span>
  <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"time"</span><span class="p">];</span>
  <span class="kt">double</span> <span class="n">latitude</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"data"</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
  <span class="kt">double</span> <span class="n">longitude</span> <span class="o">=</span> <span class="n">doc</span><span class="p">[</span><span class="s">"data"</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

  <span class="c1">// Print the values</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">sensor</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">longitude</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// not used in this tutorial</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Astute readers will recognize <a href="/v7/example/parser/">JsonParserExample.ino</a>.</p>
<h2 id="arduinojson-assistant">ArduinoJson Assistant</h2>
<p>As you saw in this tutorial, a significant part of the code is dedicated to extracting the values from the <a href="/v7/api/jsondocument/"><code class="language-plaintext highlighter-rouge">JsonDocument</code></a>.
Writing this code can be cumbersome and error-prone, which is why ArduinoJson offers a tool to generate this code for you: the <a href="/v7/assistant/">ArduinoJson Assistant</a>.</p>
<p>The <a href="/v7/assistant/">ArduinoJson Assistant</a> is an online tool available on arduinojson.org.
You can access it by clicking “Assistant” at the top of the page.</p>
<p>The Assistant is composed of three steps.</p>
<h3 id="step-1">Step 1</h3>
<p><img src="/images/2024/03/arduinojson-assistant-step1.png" alt="ArduinoJson Assistant, Step 1" /></p>
<p>In the first step, you must select:</p>
<ul>
<li>the device you’re using (e.g., Arduino UNO, ESP8266, ESP32),</li>
<li>the mode you want to use: “Deserialize”,</li>
<li>the input type (e.g., <code class="language-plaintext highlighter-rouge">const char*</code>).</li>
</ul>
<h3 id="step-2">Step 2</h3>
<p>In the second step, you must enter the JSON document you want to deserialize.</p>
<p><img src="/images/2024/03/arduinojson-assistant-step2.png" alt="ArduinoJson Assistant, Step 2" /></p>
<p>At the bottom, you can see some gages to check that this JSON document fits the hardware and software limitations.</p>
<h3 id="step-3">Step 3</h3>
<p>The last step contains a sample program that extracts all the values from the JSON document entered in step 2.</p>
<p><img src="/images/2024/03/arduinojson-assistant-step3.png" alt="ArduinoJson Assistant, Step 3" /></p>
<p>You can copy this program and paste it into your Arduino IDE.<br/>
Pretty cool, huh?</p>
<p class="short-tip">If you enjoyed learning from it and want to expand your skills further, consider checking out the full-length guide in my book <a href="/book/">Mastering ArduinoJson</a>. Not only does it offer an extensive exploration of various aspects of JSON processing with Arduino, but purchasing the book directly supports the development of ArduinoJson and the other Arduino libraries I created.</p>
</div>
<nav aria-label="breadcrumb" class="mt-2">
<ol class="breadcrumb">
<li class="breadcrumb-item"><a href="/">Home</a></li>
<li class="breadcrumb-item"><a href="/v7/">Version 7</a></li><li class="breadcrumb-item active">
<span>Deserialization tutorial
</span>
</li>
</ol>
</nav>
</div>
</main>
<footer class="site-footer hidden-sm-down text-light bg-dark py-3">
<div class="container">
<div class="row">
<div class="col-md-6 col-lg-4 my-2">
<h5>ArduinoJson</h5>
<div>A JSON library for embedded C++.</div>
<div>Simple, efficient, and versatile.</div>
<div class="text-muted">Copyright 2014-2024 &copy; Benoît Blanchon</div>
</div>
<div class="col-md-6 col-lg-4 my-2">
<form action="https://arduinojson.us7.list-manage.com/subscribe/post?u=95f23327cb24007901b8c6799&amp;id=38598e37f4" method="post" target="_blank" class="newsletter-form">
<h5>Newsletter</h5>
<div class="form-row align-items-center">
<div class="col-auto">
<input type="email" placeholder="Your email" class="form-control form-control-sm" name="EMAIL" id="newsletter-email">
</div>
<div class="col-auto">
<input type="submit" class="btn btn-primary btn-sm" value="Subscribe" name="subscribe">
</div>
</div>
<div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_95f23327cb24007901b8c6799_38598e37f4" tabindex="-1" value></div>
<div class="text-muted">Stay informed of the major changes.</div>
</form>
</div>
<div class="col-md-6 col-lg-2 my-2">
<nav class="nav">
<a class="nav-link" href="https://github.com/bblanchon/ArduinoJson"><svg viewBox="0 0 496 512" class="icon"><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" fill="currentColor" /></svg> GitHub</a>
</nav>
</div>
<div class="col-md-6 col-lg-2 my-2">
<nav class="nav">
<a class="nav-link" href="/about/">About</a>
<a class="nav-link" href="/contact/">Contact</a>
<a class="nav-link" href="/privacy/">Privacy</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<script src="/node_modules/jquery/dist/jquery.slim.min.js?1710864966"></script>
<script src="/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js?1710864966"></script>
<script src="/assets/bundle.js?1710864966"></script>
<script src="https://z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&adInstanceId=f2d60197-3e3c-4c13-bed0-c92201c67217"></script>
</body>
</html>
